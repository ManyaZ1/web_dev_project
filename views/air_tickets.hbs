<link rel="stylesheet" href="/css/air_tickets.css" />
<div id="globeViz"></div>
<div id="globeOverlay"></div>

<div class="page-container">
    <div class="floating-form-box">
        <h2>Your Flight</h2>
        <form id="flightForm" method="GET" action="/tickets">
            <!-- From / To -->
            <div class="form-grid-2">
                <div>
                    <label for="fromInput">From:</label>
                    <select id="fromInput" name="fromInput" required>
                        <option value="">Select</option>
                    </select>
                </div>
                <div>
                    <label for="toInput">To:</label>
                    <select id="toInput" name="toInput" required>
                        <option value="">Select</option>
                    </select>
                </div>
            </div>

            <!-- Trip Type -->
            <label for="tripType">Trip Type:</label>
            <select id="tripType" name="tripType" required>
                <option value="oneway">One-way</option>
                <option value="roundtrip">Round-trip</option>
            </select>

            <!-- Date Range Picker -->
            <div class="date-range-picker">
                <div class="date-field">
                    <label for="departureDate">
                        <span class="calendar-icon">ðŸ“…</span> Departure
                    </label>
                    <input type="text" id="departureDate" name="departureDate" required />
                </div>
                <div class="divider"></div>
                <div class="date-field return-field" id="returnDateContainer">
                    <label for="returnDate">
                        <span class="calendar-icon">ðŸ“…</span> Return
                    </label>
                    <input type="text" id="returnDate" name="returnDate" />
                </div>
            </div>

            <!-- Class -->
            <label for="flightClass">Class:</label>
            <select id="flightClass" name="flightClass" required>
                <option value="economy">Economy</option>
                <option value="business">Business</option>
                <option value="first">First</option>
            </select>

            <!-- Submit -->
            <div class="button-row">
                <button id="searchBtn" type="submit">Search Flights</button>
            </div>
        </form>
    </div>
</div>

<!-- Load Globe and Three.js Libraries -->
<script src="https://unpkg.com/globe.gl"></script>
<script src="/js/globe.js"></script>

<script>
    async function loadCities() {
        try {
            const response = await fetch('/api/cities');
            if (!response.ok) throw new Error('Failed to fetch cities');

            const cities = await response.json();
            const fromSelect = document.getElementById('fromInput');
            const toSelect = document.getElementById('toInput');

            cities.forEach(city => {
                const optionFrom = document.createElement('option');
                optionFrom.value = city;
                optionFrom.textContent = city;

                const optionTo = optionFrom.cloneNode(true);

                fromSelect.appendChild(optionFrom);
                toSelect.appendChild(optionTo);
            });
        } catch (error) {
            console.error('Error loading cities:', error);
        }
    }

    window.addEventListener('DOMContentLoaded', () => {
        loadCities();

        const returnContainer = document.getElementById('returnDateContainer');
        const tripTypeSelect = document.getElementById('tripType');
        const returnDateInput = document.getElementById('returnDate');

        function updateReturnDateVisibility() {
            if (tripTypeSelect.value === 'roundtrip') {
                returnContainer.classList.add('show');
            } else {
                returnContainer.classList.remove('show');
                returnDateInput.value = "";
            }
        }

        tripTypeSelect.addEventListener('change', updateReturnDateVisibility);
        updateReturnDateVisibility();
    });

    document.addEventListener('DOMContentLoaded', () => {
        const formBox = document.querySelector('.floating-form-box');
        const globe = document.getElementById('globeViz');
        const form = document.getElementById('flightForm');

        form.addEventListener('submit', (e) => {
            e.preventDefault(); // Prevent immediate submit
            
            // Trigger form validation
            if (!form.checkValidity()) {
                form.reportValidity();
                return; // Invalid fields will show built-in validation
            }

            if (formBox) {
                formBox.classList.add('slide-out'); // Trigger slide-out
            }
            if (globe) {
                globe.classList.remove('fade-in');
                globe.classList.add('fade-out');
            }

            // Submit after animation completes
            setTimeout(() => {
                form.submit();
            }, 500); // Match animation duration
        });
    });
</script>

<!-- Date Picker Libraries -->
<script src="https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.umd.min.js"></script>

<script>
(() => {
    const fromSel = document.getElementById('fromInput');
    const toSel = document.getElementById('toInput');
    const tripSel = document.getElementById('tripType');
    const depInput = document.getElementById('departureDate');
    const retInput = document.getElementById('returnDate');
    const retWrapper = document.getElementById('returnDateContainer');

    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let picker = null;
    let outboundPrices = {};
    let inboundPrices = {};
    let currentPrices = {};
    let clickCounter = 0;

    function pricesAPI(from, to) {
        return `/api/price-calendar?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}`;
    }

    async function fetchPrices(from, to) {
        if (!from || !to) return {};
        try {
            const res = await fetch(pricesAPI(from, to));
            const data = await res.json();
            const map = {};
            data.forEach(({ date, price }) => (map[date] = price));
            return map;
        } catch (err) {
            console.error('Price fetch failed:', err);
            return {};
        }
    }

    async function initPicker() {
        if (picker) picker.destroy();

        const from = fromSel.value;
        const to = toSel.value;
        const tripType = tripSel.value;

        if (!from || !to || !tripType) return;

        outboundPrices = await fetchPrices(from, to);
        inboundPrices = await fetchPrices(to, from);
        currentPrices = outboundPrices;
        clickCounter = 0;

        const isRoundtrip = tripType === 'roundtrip';

        picker = new easepick.create({
            element: depInput,
            css: ['https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.css'],
            zIndex: 10000,
            calendars: 1,
            readonly: true,
            plugins: isRoundtrip ? ['LockPlugin', 'RangePlugin'] : ['LockPlugin'],
            LockPlugin: { minDate: today },
            RangePlugin: { elementEnd: retInput },
            setup(pkr) {
                pkr.on('view', ({ detail: { view, date, target } }) => {
                    if (view !== 'CalendarDay') return;
                    const d = date.format('YYYY-MM-DD');
                    const price = currentPrices[d];
                    if (!price) return;

                    let tag = target.querySelector('.price-tag');
                    if (!tag) {
                        tag = document.createElement('span');
                        tag.className = 'price-tag';
                        tag.style.cssText = 'display:block;font-size:0.75rem;';
                        target.append(tag);
                    }
                    tag.textContent = `â‚¬${price}`;
                });

                if (isRoundtrip) {
                    pkr.on('click', (e) => {
                        const target = e.detail?.target || e.target;
                        if (!target) return;
                        console.log('Clicked target:', target);

                        const classList = target.classList;

                        // Ignore clicks on navigation or price tags
                        if (classList.contains('next-button') || classList.contains('price')) {
                            console.log('Navigation or price tag clicked. Ignoring...');
                            return;
                        }

                        // Process only clicks on valid day cells
                        if (classList.contains('day') || classList.contains('price-tag')) {
                            clickCounter++;
                            console.log('Day cell clicked. Click counter:', clickCounter);

                            if (clickCounter === 1) {
                                currentPrices = inboundPrices;
                                console.log('â†’ Switched to return prices (hover preview)');
                            } 
                            else if (clickCounter === 2) {
                                clickCounter = 0;
                                setTimeout(() => {
                                    const startDate = pkr.getStartDate();
                                    const endDate = pkr.getEndDate();

                                    if (startDate && endDate) {
                                        depInput.value = startDate.format('YYYY-MM-DD');
                                        retInput.value = endDate.format('YYYY-MM-DD');
                                    } else {
                                        depInput.value = '';
                                        retInput.value = '';
                                        console.warn('Still null, forcing reset.');
                                    }

                                    currentPrices = outboundPrices;
                                    pkr.hide();
                                }, 0);
                            }
                        } else {
                            console.log('Clicked non-day element. Ignoring...');
                        }
                    });
                } else {
                    pkr.on('select', ({ detail: { date } }) => {
                        depInput.value = date.format('YYYY-MM-DD');
                        console.log(`- departureDate SET to: ${depInput.value}`);
                    });
                }
            }
        });

        if (isRoundtrip) {
            retWrapper.classList.add('show');
        } else {
            retWrapper.classList.remove('show');
            retInput.value = '';
        }

        //picker.show(); It is just annoying to pop up automatically
    }

    [fromSel, toSel, tripSel].forEach(el =>
        el.addEventListener('change', () => {
            currentPrices = outboundPrices;
            clickCounter = 0;
            initPicker();
        })
    );
})();
</script>
